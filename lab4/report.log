2024-12-15 14:59:26,944 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:00:52,133 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:05:30,702 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:07:15,067 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:07:41,919 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:08:34,097 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:08:54,436 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:09:14,673 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:10:56,543 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:19:48,191 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:20:37,828 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:20:56,195 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:23:17,716 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 15:42:22,751 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2670420398.800006, best pos: [0.04977811 0.26756327 0.18701431 ... 0.32909388 0.70288141 0.57595512]
2024-12-15 22:23:07,585 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 22:23:41,808 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 22:24:08,321 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-15 22:25:46,594 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 09:03:30,770 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 09:08:29,054 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 09:09:51,863 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 09:19:33,125 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 09:31:19,888 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 09:58:51,070 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 49896.825400000016, best pos: [ 1.23966152 33.27594751 44.63052031 39.20233951 38.5114538  30.17106966
 25.41638318 22.14174578 23.92115619  9.7503026  27.64699749 34.39869151
 19.48334716 22.34222992 36.21227268  9.9720628  23.4861859  48.97914694
 22.74136167 31.60567419 32.65533262 39.69789576 37.35717889 25.99134363
 42.75133424  1.3575063  30.79180106 27.50444162 26.38016934 31.44092685
 22.92380248 31.14398246 30.59109529 30.37912385 36.93965491 30.82546818
 42.29266858 26.26478243 31.24692197 40.565536   11.872309   30.06025327
 39.88815227 28.44364834 33.09439731 31.11801205 21.50726652 19.18727317
 20.76892994 22.01912224  1.27345306 34.22466419 30.12755495 33.27108745
 37.62453996 45.3798437  31.96328876 31.41360274 37.31267195 30.96100329
 37.34151301 35.0047135  21.61672026 16.30479506 48.11939205 36.18964765
 26.8877009  28.02889672 22.33817839 25.13040455 25.75460377 29.6272927
 32.6759131  33.96143538 21.39112854  1.34863324 29.62841288 28.02689323
 34.1598532  45.93230605 26.95854816 30.58046899 27.00537904 39.08039034
 37.13760034 11.55776599 34.099372   26.20403897 29.13780617 30.43632853
 38.78790834 27.99126846 38.15381054 43.4104144  40.10906612 31.33151116
 35.60883551 29.88027529 39.02425935 41.63869006  1.68168668 23.20860944
 41.77703335 34.73234374 37.2909832  17.30256742 21.24239959 38.18021993
 46.15848405 34.46490568 41.67334896 44.43279841 26.11605969 29.70056045
 35.83681931 24.46255588 32.90218785 25.70114417 37.37464396 34.13373575
 20.48575519 25.27027395 47.10008531 40.79904914 43.06985626  1.39393853
 33.14831239 32.25341496 12.30463549 24.31484797 25.83208766 49.12288799
 42.25771559 26.3474557  12.5071804  40.0137403  42.04661754 32.88543586
 16.5180582  23.89289901 27.74628841 28.65940854 33.98730297 17.77983815
 36.33995328 42.21550639 31.91299781 41.10284358 24.19265147 36.74335148
  1.1635383  19.66436123 32.90364184 42.64078285 30.87354203 28.63069024
 30.99924846 39.61868377 22.9176568  27.81197924 39.69238679 25.54632928
 47.99793881 44.92197203 24.70336371 22.27213275 23.08573592 49.27094366
 38.21684327 44.64937425 28.48994247 27.3722196  30.66128201 26.52980018
 25.74348036  1.40977057 25.12253654 24.93935035 27.04889527 22.05359737
 31.12186334 26.67613183 29.02588316 45.44269218 44.07304058 30.93122139
 36.35777307 30.27793326 29.77491449 43.48242172 43.49082804 41.07569802
 46.02895538 35.68957975 32.94958044 54.71992958 19.05431026 22.83200542
 39.34698182 19.31037905  1.57126193 25.1833057  25.51744006 49.59845432
 18.69482965 23.16406397 28.63460963 16.92248994 29.67713548 22.40142727
 27.55540561 51.94634395 22.82304331 30.2080058  22.6971042  25.90616004
 30.07924686 11.59556759 40.96737178 25.32609518 25.65565676 45.38320369
 25.92576144 27.87340175 33.09985835  1.87551978 35.1241717  25.8743265
 30.95083031 32.34576546 23.09504988 18.88733825 37.07256819 33.91146846
 19.63103271 24.1134205  38.64097817 26.38994037 39.69522922 45.42463572
 40.67021527 43.2577125  25.84245133 40.20267093 21.01755467 32.09559878
 48.53749671 44.76351067 40.42728209 33.39552557]
2024-12-16 10:01:10,202 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:02:08,037 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:04:04,155 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:04:50,413 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:05:36,834 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:06:10,604 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:11:03,661 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:27:11,486 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:29:04,432 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 9656.8627942, best pos: [ 1.10426081 29.61582096 22.65269961 33.47423914 30.28256436 11.30763817
 24.29839658 31.9782771  37.97642187 45.00437274 35.0828096  40.62400796
 33.14194674  1.07013477 44.50739786 20.85997256 18.62959048 20.27370625
  9.30130183 28.28496691 34.43628917 35.17550269 31.7206364  23.49740747
 33.0074704  46.42866336  1.53514245 22.63875441 33.11035045 33.96640156
 25.40695666 18.98827296 17.42702563 24.77614618 34.2942038  42.61987713
 23.77584599 27.2643364  32.97428182  1.38982858 37.36194823 27.96913213
 12.55082574 38.81947437 14.69383578 38.15043631 36.26813788 36.25941473
 27.93065777 28.33055735 29.1122643  25.75526085  1.77207374 10.95544387
 28.26403901  7.7088808  24.06624075 44.02967019 30.08797018 41.9398389
 28.52975869 35.76990598  7.59398802 39.85957892 29.1335315   1.53320846
 26.4449222  21.04640576 40.30989095 19.93612214 19.20050709 17.68146925
 16.66407374 24.0678863  20.61463701 25.60619452 42.19885297 38.39660247
  1.24319397  8.23961002 25.54880597 44.27623233 36.76756354 42.7846176
 39.14786383 13.25478282 24.45543197 37.81186466 26.96956947 21.09325341
 20.11156463  1.1709346  29.04298317 28.90612375 27.24867685 11.32083697
 36.42021352 11.17401794 25.4917478  43.44355726 27.96817675 42.31178793
 22.03239964 23.19783238  1.88997609 41.50417348 46.04993414 18.61065257
 37.84730182 49.55406483 23.26184822 22.16636604 21.6808295  43.51518589
 28.59472113 28.23707738 20.82126267  1.59979894 38.3895227  32.41113491
 27.5966333  38.61227608 38.18005981 43.49347828 17.74524757 37.71893173
 31.73079127 35.36655688 43.3026465  27.26216822]
2024-12-16 10:31:14,913 - pyswarms.single.global_best - INFO - Optimize for 10 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:32:17,442 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 9658.3867839, best pos: [ 1.79970893 44.59220065 36.88556701 33.94972406 35.60905332 28.88841431
 43.33793226 30.80144256 22.67971668 40.84049899 27.9737844  26.97702058
 36.91388238  1.58745205 46.50157923 22.52084294  8.78470325 23.65526678
  4.89852293 36.89212354 41.79732554 40.36074984 41.33447312 56.40040103
 27.49100167 29.16354758  1.62681816 16.16975485 12.43845918 28.32321151
 12.9597133  27.9724513  45.4902371  22.71170756 30.23833834 52.60952146
 28.11673444 36.76925896  9.29297206  1.53687738 46.83232541 19.67508244
  2.21711913 11.88207677 29.48755319 32.29679261 31.37636646 22.22838626
 41.22821678 31.08272473 34.75533703 30.98347501  1.01999492  9.64261905
 41.55736089 44.19673713 39.17980074 41.73284703 24.01726662 30.92870311
 47.27375531 48.46588036 51.74564314 47.67819213 25.46491488  1.30757154
 38.57698784 33.76477255 41.61112305 14.78518319 46.54335131 36.10340345
 25.6604835  42.7892285  24.80907806 17.83404249 30.56617245 30.5894877
  0.07236026 31.90459852 20.26980493 27.88124009 33.4836325  28.43956697
 39.37920672 42.42753445 22.26569906 25.53549307 27.86572343 29.27848965
 24.31618673  1.85864789 29.82330731 40.81814292 15.60269921 42.53976845
 28.2798434  35.25285032 41.0356046  39.47140957 29.39899774 29.58582348
 36.84796545 17.55109746  1.46495058 36.74593668  7.82609892 19.9500564
 31.64619248 47.50622835 22.85045571 26.97854706 23.94987264 20.7406654
 26.40368803 31.55700567 17.06710272  1.15010328 34.09681272 13.28858509
 41.88946708 26.21681873 39.37466181 40.81658797 29.05906049 42.33478516
 13.98550743 11.98323227 35.6258615  25.82167223]
2024-12-16 10:32:49,816 - pyswarms.single.global_best - INFO - Optimize for 50 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 10:43:42,819 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 9654.3068354, best pos: [ 1.20079142 14.37985702 17.36602342 46.41112764 25.79140372 31.700815
 38.85294772 24.00918422 21.38646208 27.44444756 37.16007735 33.88484723
 42.11214173  1.10853578 30.7234303  39.1614177  28.09710786 38.08890531
 31.20288389 29.10160899 31.16508835 38.99247091 10.30387879 36.96907534
 33.14963285 32.22082624  1.37379917 33.61754558 33.96934089 42.9838278
 26.37323866 27.96408365 20.73382425 29.29965768 51.13832929 42.93762048
 35.82080629 33.84532873 23.8828725   1.80028791 35.16226653 37.56243622
 22.8857705  44.67750401 32.34935982 33.38341117 23.2644362  42.87805851
 45.1897391  45.11608902 32.81664807 30.2492422   1.54280344 29.24681005
 26.37821171 39.52173303 44.47526808 24.36540043 21.499738   28.84956811
 42.45433383 38.24214083 39.21112625 27.31056305 22.31212148  1.10099523
 43.85899704 39.04273528 22.28054766 31.83412872 38.38870941 38.72744436
 30.30198916 42.73761248 37.86905063 22.54595873 26.88556686 14.7136197
  1.46299312 40.70973897 43.26255636 47.05821932 27.76029699 44.12933552
 26.68467677 33.9343921  28.25044043 35.8588824  24.00468544 26.89608401
 40.27514043  1.17460506 18.39138001 22.79695433 41.19558394 46.01894807
 34.68873729 33.84993099 25.23158762 41.50711545 34.12728211 32.47674262
 15.37679777 25.60222618  1.07756498 49.10051145 39.5647267  31.70396414
 31.78550277 28.16537303 37.31705473 29.30592745 38.14008171 43.84456465
 36.56302146 44.37439774 37.16335126  1.04054392 19.79158631 16.17645693
 30.57026568 30.84121943 43.03795727 34.42082065 34.01758011 38.02036159
 39.70090921 32.71048566 24.08288835 23.79857295]
2024-12-16 10:45:06,715 - pyswarms.single.local_best - INFO - Optimize for 50 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 5}
2024-12-16 10:46:39,329 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 5}
2024-12-16 10:55:18,820 - pyswarms.discrete.binary - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2024-12-16 11:00:10,375 - pyswarms.discrete.binary - INFO - Optimization finished | best cost: 9640.461691, best pos: [1 1 1 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 0 1 1 1 1 0 0 0 0 1 1 0 0 0 0 0 0 1 1
 1 1 1 0 0 1 0 1 1 0 1 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 1 1 0 0 1 0 1 0 1 0
 0 0 0 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0
 1 1 0 0 1 1 1 1 1 0 0 0 0 1 1 0 0 1 0]
2024-12-16 11:10:29,604 - pyswarms.backend.generators - ERROR - generate_swarm() takes an int for n_particles and dimensions and an array for bounds
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 65, in generate_swarm
    np.all(bounds[0] <= init_pos) and np.all(init_pos <= bounds[1])
TypeError: '<=' not supported between instances of 'float' and 'itertools.chain'
2024-12-16 11:11:39,214 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (130,)
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 65, in generate_swarm
    np.all(bounds[0] <= init_pos) and np.all(init_pos <= bounds[1])
ValueError: operands could not be broadcast together with shapes (130,) (60,10,13) 
2024-12-16 11:12:13,732 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (130,)
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 65, in generate_swarm
    np.all(bounds[0] <= init_pos) and np.all(init_pos <= bounds[1])
ValueError: operands could not be broadcast together with shapes (130,) (60,10,13) 
2024-12-16 11:12:30,557 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (130,)
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 65, in generate_swarm
    np.all(bounds[0] <= init_pos) and np.all(init_pos <= bounds[1])
ValueError: operands could not be broadcast together with shapes (130,) (60,10,13) 
2024-12-16 11:12:44,760 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (130,)
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 65, in generate_swarm
    np.all(bounds[0] <= init_pos) and np.all(init_pos <= bounds[1])
ValueError: operands could not be broadcast together with shapes (130,) (60,10,13) 
2024-12-16 11:12:54,454 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (130,)
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 65, in generate_swarm
    np.all(bounds[0] <= init_pos) and np.all(init_pos <= bounds[1])
ValueError: operands could not be broadcast together with shapes (130,) (60,10,13) 
2024-12-16 11:13:22,837 - pyswarms.backend.generators - ERROR - Bounds and/or init_pos should be of size (130,)
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 65, in generate_swarm
    np.all(bounds[0] <= init_pos) and np.all(init_pos <= bounds[1])
ValueError: operands could not be broadcast together with shapes (130,) (60,10,13) 
2024-12-16 11:14:27,694 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:15:12,016 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:20:32,075 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 9651.6382002, best pos: [ 2. 61.  8. 58. 47. 21.  0. 51. 10. 21. 11. 19. 50.  2. 61. 41.  2. 37.
 55. 24. 52. 57.  8. 46. 39. 44.  2. 61.  7. 45. 36. 48. 45. 30. 26. 26.
 53.  9. 34.  2. 61. 20. 20. 46. 31. 18. 54. 25.  2.  1. 36. 61.  2. 61.
 12. 25. 50. 19. 31. 29. 38. 23. 14. 32. 54.  2. 61. 27. 11.  6. 51.  1.
 27. 33.  0. 10. 56. 44.  2. 61. 23.  8. 15. 28. 61.  5. 58. 34. 52.  8.
 24.  2. 61. 30. 56. 30. 51.  0. 30. 60. 58. 43. 21. 27.  2. 61. 37. 31.
 26. 61. 10. 50. 61.  0. 26. 24. 51.  2. 61.  2. 17. 19. 17.  9. 33. 60.
 21. 10. 22. 23.]
2024-12-16 11:22:52,648 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:28:04,247 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 9651.2235236, best pos: [ 2. 61. 32. 11. 59. 17.  2. 37. 12. 35. 47. 11. 54.  2. 61. 50. 49. 42.
 41. 57. 43. 41. 55. 56. 29. 56.  2. 61. 20. 15. 43. 43. 32. 38. 61. 26.
  5. 42. 45.  2. 61. 27. 24. 41. 27.  8. 38. 22. 16. 28.  9. 54.  2. 61.
 17.  7. 32. 16. 60. 46. 10. 54. 23. 32. 48.  2. 61. 57. 54. 33. 23. 14.
 49. 17.  9. 42.  1. 19.  2. 61. 31. 34. 50. 13. 49. 39. 38. 22. 51. 25.
 25.  2. 61.  3. 40. 22.  6. 13. 47. 49. 25. 18. 36. 55.  2. 61. 17.  2.
 39. 31. 11. 35. 33. 10. 45. 26. 14.  2. 61. 36. 26. 23. 22. 15.  6. 18.
 15. 58.  6. 52.]
2024-12-16 11:33:15,439 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:36:16,917 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:36:56,385 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:37:40,269 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:38:12,736 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:38:40,855 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:39:06,078 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:39:45,577 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:40:13,522 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:40:27,652 - pyswarms.single.local_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-16 11:45:41,327 - pyswarms.single.local_best - INFO - Optimization finished | best cost: 9651.1931224, best pos: [ 2. 61. 15. 45. 25.  2. 56. 52. 26. 42. 23. 49. 14.  2. 61. 23. 27. 47.
 12. 30.  2.  5.  5. 26. 59. 13.  2. 61. 60. 55. 27.  4. 37.  1. 47. 11.
  1.  0. 49.  2. 61. 47. 42. 30. 49. 40. 25. 26.  1. 59.  4. 33.  2. 61.
 50. 22. 40. 42. 56. 49. 31. 21. 17. 61.  4.  2. 61. 36. 54. 42. 14. 43.
 47. 14. 49.  3. 61. 46.  2. 61.  2. 46. 38. 30. 43. 11. 25. 34. 35. 11.
 43.  2. 61. 55. 26. 12. 25. 47. 43. 58. 30. 45. 45.  3.  2. 61. 31. 53.
 33. 50. 10. 25. 24.  7. 40. 25. 22.  2. 61. 17. 56. 34.  1. 48. 26. 22.
 55. 33. 15. 58.]
2024-12-16 11:48:30,572 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 11:53:38,445 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 9655.6404718, best pos: [ 1.32303552  1.32355627 42.47699978 52.21173961  9.56483213 23.08863364
 25.42249645 38.06432868 24.24227341 35.14410813 39.9196881  28.15478243
 44.72054257  1.77559993  1.72606774 28.26261737 27.66344924 32.44598325
 24.81895679 43.11461202 35.1176754  25.45249113 11.71750373 35.40654174
 25.97138379 17.21549012  1.59723182  0.87038237 34.67987767 38.25776359
 33.36714923 25.01401871 38.79069649 30.81458615 23.06216894 27.76750195
 35.90639048 37.34033088 49.3857694   1.43952808  0.96877565 17.19285279
 15.02267404 25.64192226 42.75690548 31.96603694 31.4975043  24.36071125
 31.52662989 43.67288397 45.36916133 21.85503812  1.1117148   1.54315814
 32.04921242 33.03328481 30.32402427 23.91704184 24.15629112 24.77390248
 22.58468044 30.97417253 24.7935122  40.03241224 40.01470653  1.19750862
 22.19393651 33.90544509 27.73180015 29.34799228 29.61223812 42.47169019
 33.01179069 27.36455706 43.82597293 33.29420267 38.97787733 37.72274469
  0.65827406  0.91486937 33.40413919 37.17199126 32.04189166 43.93751971
 35.13550421 33.79617234 44.49791214 12.84026005 43.86265341 31.23459921
 22.68430166  1.54941405  1.84591801 31.92157193 26.13714937 27.0645709
 33.4443651  36.44040225 37.59216048 31.69113276 38.60253864 28.47727387
 30.49184507 30.98115029  1.88703979  1.60292185 44.03482043 31.1264488
 11.15459676 36.46594514 39.2984627  32.24295244 27.85104818 26.69839517
 29.76119877  9.44094214 24.36708718  0.51382312  1.29487011 26.20278089
 50.18927387 32.25127616 24.85603705 18.56280617 41.90130068 56.05830535
 21.58282967 23.87359383 24.82671079 27.55719296]
2024-12-16 12:00:55,994 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.9, 'c2': 0.1, 'w': 0.9}
2024-12-16 12:06:22,277 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 9655.7823426, best pos: [ 1.36635233  2.0895851  28.03917842 40.43110773 38.04801537 25.89883008
 29.39084917 31.42776593 37.11541083 41.54833457 34.95626569 30.17701067
 27.5887364   1.23990585  2.43827014 46.57734289 42.57303268 44.89636615
 43.93946428 37.44296459 25.09927281 43.5744858  40.73014008 41.12589648
 24.75630358 43.48970033  1.14076468  1.07025027 46.9495287  35.3847992
 33.21238553 27.21683892 37.38962013 39.87552564 24.02577158 43.14193545
 34.29218816 34.59011191 42.73995412  1.11633343  1.29198599 23.79240242
 14.82250116 28.81973365 34.07697135 24.83870174 22.0007457  13.80558218
 39.65388354 50.13779193 41.54230796 38.68068268  1.2071436   2.67788598
 29.90362034 32.24698982 38.91216269 36.8671036  25.24809121 49.25141131
 32.31917157 19.73736052 28.13574363 31.89768857 36.13250819  1.31740643
  1.95309615 33.18018551 27.10727333 22.10867038 25.24345712 37.31448418
 23.46877554 49.31559965 20.57388568 34.06647727 24.361942   26.62573065
  1.59257308  1.01117631 20.7486913  42.3909191  23.26231031 31.22497215
 32.42273739 26.0677391  25.97790732 28.46577016 14.9564158  38.84191287
 42.01971324  1.55917807  1.45088569 26.53377224 37.85997049 25.38906554
 43.91403561 24.06384193 32.79453279 33.60434591 34.77050167 29.29252375
 36.66056231 22.68360849  1.36555027  2.27033781 13.38863424 22.41557576
 28.74055545 31.56348776 25.13825618 25.17875211 40.89958269 27.85822408
 34.81261897 23.81265265 26.86276517  1.76095581  2.41763735 22.62413699
 38.54079516 40.98918949 46.8080645  50.8209678  46.75094325 21.66401649
 43.58631037 30.30857899 46.32399377 40.53941892]
2024-12-16 12:09:25,748 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.9, 'c2': 0.1, 'w': 0.9}
2024-12-16 12:11:48,936 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.9, 'c2': 0.1, 'w': 0.9}
2024-12-16 12:12:30,720 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.9, 'c2': 0.1, 'w': 0.9}
2024-12-16 12:13:03,192 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.9, 'c2': 0.1, 'w': 0.9}
2024-12-16 12:13:28,879 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.9, 'c2': 0.1, 'w': 0.9}
2024-12-16 12:18:04,368 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 3863.4629965000004, best pos: [ 0. 61. 54. 54. 54. 54. 54. 53. 53. 53. 53. 53. 54.  0. 61. 54. 54. 54.
 54. 53. 53. 53. 53. 53. 54. 54.  0. 61. 54. 54. 54. 53. 53. 53. 53. 53.
 54. 54. 54.  0. 61. 54. 54. 53. 53. 53. 53. 53. 54. 54. 54. 54.  0. 61.
 54. 53. 53. 53. 53. 53. 54. 54. 54. 54. 54.  0. 61. 53. 53. 53. 53. 53.
 54. 54. 54. 54. 54. 53.  0. 61. 53. 53. 53. 53. 54. 54. 54. 54. 54. 53.
 53.  0. 61. 53. 53. 53. 54. 54. 54. 54. 54. 53. 53. 53.  0. 61. 53. 53.
 54. 54. 54. 54. 54. 53. 53. 53. 53.  0. 61. 53. 54. 54. 54. 54. 54. 53.
 53. 53. 53. 53.]
2024-12-16 12:19:00,860 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:20:08,082 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:22:05,318 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:25:56,929 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:32:48,487 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2583999.2885139, best pos: [ 0. 61. 28. 58. 55. 58. 43. 14. 58. 31. 12. 12. 52.  0. 61. 24. 13. 27.
 55. 31. 53. 48. 44. 58. 35. 44.  0. 61. 18. 58. 11. 31.  2. 16. 35. 58.
 45. 35. 37.  0. 61. 55. 58. 58. 37. 24. 17. 45. 20. 27. 37. 27.  0. 61.
 37. 35. 28. 44. 28. 35. 45. 57. 15. 58. 44.  0. 61. 53. 32. 58. 39. 45.
  3. 12. 25. 35. 58. 14.  0. 61. 37. 58. 55. 58. 44. 36. 26. 44. 38. 28.
 49.  0. 61. 58. 44. 58. 52. 45. 24. 26. 26. 57. 52. 58.  0. 61. 17. 58.
 53. 35. 58. 18. 25. 53. 13.  2. 44.  0. 61. 53. 37. 28. 53. 53. 45. 13.
 35. 35. 44. 50.]
2024-12-16 12:45:31,020 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:48:46,550 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:54:34,212 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:55:26,628 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:56:23,052 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 12:59:43,540 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:03:19,697 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:04:54,862 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:05:15,976 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:10:18,110 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:11:29,022 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:12:09,293 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:30:45,337 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:33:11,858 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:34:21,858 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9}
2024-12-16 13:38:01,538 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.1}
2024-12-16 13:40:15,687 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.1}
2024-12-16 13:40:30,434 - pyswarms.backend.handlers - ERROR - Unrecognized strategy: adjusted. Choose one among: ['adjust', 'invert', 'unmodified', 'zero']
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\handlers.py", line 437, in __call__
    new_position = self.strategies[self.strategy](
KeyError: 'adjusted'
2024-12-16 13:40:30,450 - pyswarms.backend.operators - ERROR - Missing keyword in swarm.options
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\operators.py", line 144, in compute_velocity
    updated_velocity = vh(
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\handlers.py", line 437, in __call__
    new_position = self.strategies[self.strategy](
KeyError: 'adjusted'
2024-12-16 13:41:13,085 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.1}
2024-12-16 13:43:51,236 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.1}
2024-12-16 13:46:00,119 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.1}
2024-12-16 13:49:44,764 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.1}
2024-12-16 13:52:21,548 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.1}
2024-12-16 13:56:10,787 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.1, 'c2': 0.5, 'w': 0.1}
2024-12-16 13:56:23,791 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.1, 'c2': 0.5, 'w': 0.1}
2024-12-16 14:06:28,035 - pyswarms.single.global_best - INFO - Optimization finished | best cost: -4216.8936045, best pos: [ 1.07040209 37.16281676 51.39220405 21.11681025 54.31849577 17.95644511
 46.21778434 54.         61.         38.84744387 45.18124476 54.
 38.10335926 52.96847232 52.0910984  40.61965644 49.69667189 43.85588456
 22.08648415 41.62766202 25.23920199 31.53602724 27.34252915 40.
 43.22784861  1.10028919 38.24005706 15.53160952 45.31685987 61.
 46.2132035  46.56959976 53.31625289 45.         32.84894192 30.72498224
 10.87784882 55.19206668 38.         46.71848661 22.1192257  38.74937841
 60.         16.72965936 33.23650375 41.85501287 57.62902601 22.
 39.42916723 51.          1.78505211 34.62633147 35.23631855 48.
 38.22891388 59.         23.7103314  31.         40.         35.44200431
 52.         24.33442095 51.         43.50124681 28.25415583 50.
 14.50735158 40.36827283 48.         32.8114252   4.7216252  37.
 44.77889626 30.63552826 40.84001242  0.7512585  42.59569665 61.
 49.         27.48911279 51.46188461 51.36150051 53.         47.
 41.77717212 30.27051298 43.96053899 54.45923565 33.8863357  56.52053549
 61.         54.82506308 47.         48.         42.09899461 41.76592852
 18.24866072 23.63444213 35.         29.13312465  1.947018   37.88412047
  7.93402885 50.13333729 22.         39.38857817 36.11881714 40.23286824
 38.96039948 21.         51.13531492 36.58335446 23.0819742  35.
 49.39576536 45.89982233 50.85854616 44.67634503 36.         31.19067187
 18.38561803 36.         59.5439131  52.68880589 38.23176415  1.82420972
 46.86838744 33.16631355 26.52798624 53.         46.6863329  59.
 31.         36.80900046 57.20981704 18.96226017 44.39024304 43.70153027
 50.         53.00001628 39.86374709 41.8415084  39.5546899  54.
 27.06430157 37.93328689 19.         29.96694289 39.74793742  5.90513874
  1.81191965 19.604144   25.         54.         39.46417857 42.47935385
 43.         42.61932478 53.         57.33597725 46.45083465 49.
 50.81853269 46.92063024 22.37528044 53.         61.         31.59690517
 44.41403062 46.         56.70225559 45.53007738 48.53518843 16.60919181
 21.37894626  0.71048028 32.9383247  48.5630205  28.74664319 43.88628764
 29.94270854 51.5050132  59.         44.21282989 39.         20.70139339
 46.         37.         38.32121558 45.15198307 54.         49.
 28.         33.15323174 16.55439294 50.72972898 53.86661386 44.32417365
 49.         46.55037636  1.96418548 20.73649343 51.5248566  12.
 49.         56.         46.53227879 33.         15.01561075 30.78178852
 38.         24.         35.47505023 45.12211711 26.00031266 34.31021975
 36.81324646 38.3793051  25.         36.6581999  43.         25.
 43.91346843 10.66781725 30.04147635  1.9096169  24.09690102 22.67826097
 41.         25.         54.         17.47369574 30.32470376 35.72507332
 32.6519749  19.56205451 13.01333318 18.         19.44280673 44.
 32.         59.92900664 51.         16.91998987 46.89666899 48.0369115
 45.58196225 30.         51.75988177 41.47747511]
2024-12-16 14:07:29,821 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.1, 'c2': 0.5, 'w': 0.1}
2024-12-16 14:12:37,767 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2996.9568419999996, best pos: [ 1.4888252  51.93922235 34.68682927 55.         61.         26.88459712
 41.19635749 53.821478   46.1618317  47.93602761 54.69170334 41.76489591
 46.63486246  1.64976753 50.1860718  39.09248761 60.         54.39204177
 52.06102523 31.96860074 25.68127264 58.         50.81910869 55.40390026
 48.27898644 48.86691852  1.89992962 51.09669283 50.21070486 34.96364042
 60.94152626 55.53960778 43.70755544 53.70980867 54.68725164 20.03419547
 46.42514294 46.56264867 42.62414475  1.17387765 43.99721297 31.49998956
 50.16416684 49.         60.23575568 48.99107779 15.         49.08900644
 43.72515473 61.         44.         53.6658038   1.90473445 46.97355148
 60.         59.47147396 58.70562245 46.37246037 39.73975301 35.26340696
 22.         56.         54.63707717 23.20709713 48.78034516  1.7046531
 52.69671649 51.98698171 57.98865088 56.36292321 36.66710475 45.42236372
 33.26730714 60.         41.12447956 42.6068128  40.15349185 48.91389483
  1.41767941 41.67318492 53.42935605 45.5233643  56.17635465 42.99934599
 46.         41.67781982 58.08596994 28.26817025 37.85251816 60.
 32.96011215  1.60860334 42.56420224 42.21087607 56.91390616 54.97305128
 43.53528021 55.86521193 48.4369331  55.63681715 47.80591102 58.7341552
 57.         50.75291362  1.17877422 50.17891814 57.34348087 51.30400048
 45.64387115 55.53322359 46.94734862 55.54521862 55.48000363 49.91042992
 60.17733317 55.73980913 55.16320118  1.11499046 48.13887416 58.77088819
 47.43538451 60.47964462 37.57842298 50.12853583 15.05102929 43.75847535
 44.         30.44334518 44.3858572  42.48993914]
2024-12-16 14:13:50,478 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-16 14:15:42,198 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-16 14:19:59,479 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4142.001286, best pos: [ 1.52435728 52.49939031 54.2466757  58.67904697 43.58692722 58.07214234
 55.50335884 53.89657989 46.4969691  32.16647155 56.23100989 55.33822155
 52.93951311  1.46508362 49.65850884 40.95995526 32.3462723  35.12406735
 57.47659773 35.70028094 53.40332882 48.45164441 47.         60.16441068
 56.72029654 53.53802601  1.45199253 53.605499   47.5068377  44.34873277
 49.58425327 53.84739529 44.17706828 40.02059877 57.98276534 34.99555844
 51.69446667 60.85809329 51.64806878  1.08717065 55.56833398 38.99869548
 41.39748862 36.12011004 31.69314181 49.59437736 49.44450032 29.6205806
 59.95467133 45.29061586 52.03807917 36.84756075  1.50842132 50.10608687
 52.72625537 52.5196801  50.6030283  52.02511603 41.09738934 59.71576701
 41.45687493 36.22415894 27.23685393 29.21907918 55.4307303   1.67660859
 54.65270334 57.66710058 52.29670648 48.52879822 44.12940939 48.31781338
 55.91836015 49.35800302 46.8280432  42.         42.81450968 46.63857348
  1.00938028 52.90567067 36.38606183 50.1634641  61.         28.97603208
 59.         54.33325161 33.12460189 41.26980578 53.07353525 33.18603576
 41.11236714  1.69732788 50.55645403 53.15300109 40.29593117 47.32276143
 43.15473985 42.7158826  43.12247849 51.13967779 56.60212505 49.74409501
 56.24215488 61.          1.9279919  50.95686934 37.78181549 51.54861068
 50.14504067 55.53851708 53.78956767 57.         40.7362321  38.34911814
 57.53749353 50.41467434 41.24192617  1.28788009 54.13785255 49.09680465
 51.91864359 30.43704013 54.93421194 59.37898883 20.65824573 42.22969642
 59.         45.41095586 55.816849   50.29854895]
2024-12-16 14:20:10,953 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.2, 'c2': 0.7, 'w': 0.1}
2024-12-16 14:22:42,038 - pyswarms.single.global_best - INFO - Optimize for 25 iters with {'c1': 0.2, 'c2': 0.7, 'w': 0.1}
2024-12-16 14:26:55,592 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2997.4413320000003, best pos: [ 1.22500927 44.71050818 56.65470093 25.53296105 48.1805184  49.74888412
 47.71037646 38.74616529 47.74951983 47.17900957 51.83740659 51.956983
 53.56182109  1.23628289 40.222148   42.16421965 45.65572466 36.6285109
 39.79773259 53.22415931 40.14591976 50.30275087 54.8232875  60.
 49.47717106 55.24675827  1.50771392 28.0336215  56.68911991 56.31607376
 55.81619387 48.16743049 33.7062118  42.         52.         16.04369356
 49.99920155 54.49596265 48.04535303  1.70458357 37.8290625  35.13444192
 52.12526156 44.32959494 49.66078956 44.49634495 52.3688744  43.61315412
 19.38509395 60.41967993 47.37063787 59.7775943   1.75116571 22.34712326
 49.46025587 48.73638744 57.         46.74810413 49.61122798 59.81828851
 50.21330206 54.12185443 48.67038141 49.3254838  39.00243839  1.24364919
 35.98428164 46.68579025 59.20452189 59.         32.18695602 48.64373334
 59.78841538 45.13727379 55.64951176 57.72793174 34.91673288 59.29528293
  1.44682317 46.19812179 58.36566688 53.         50.1604718  41.13694851
 48.52576156 49.51784473 43.70139827 50.67600425 43.         44.80901415
 52.92115592  1.36173082 23.93623222 57.60792272 29.14827878 41.
 50.93411904 56.44133088 49.75537355 55.70725791 52.95696088 55.56799688
 43.32206253 55.44355962  1.28951895 35.02173891 43.29390296 44.1812196
 51.         60.15138085 39.04794859 61.         54.18824763 50.83581256
 55.46735254 53.07139415 53.30382084  1.96029072 41.36093385 40.13470531
 56.         48.02472432 38.84789109 44.00706152 50.         51.56755056
 38.7429624  56.55726935 42.60487625 41.9668818 ]
2024-12-16 14:27:58,980 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.2, 'c2': 0.7, 'w': 0.1}
2024-12-16 14:38:27,190 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.2, 'c2': 0.7, 'w': 0.1}
2024-12-16 14:48:04,009 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-16 15:04:44,624 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 2999.2495280000003, best pos: [ 0.92883658 57.50435919 41.35616785 49.55073796 60.45049388 54.05020883
 61.         43.01289013 43.91774051 53.97127537 53.18715273 54.00071832
 51.22134913  1.67891924 58.59596628 57.02854304 38.46925293 55.22306494
 45.5184672  26.66887994 44.67041071 58.81696681 26.93260812 43.3258017
 57.69639762 55.63823528  1.62555703 56.2933011  56.72674091 59.29468464
 46.45377479 59.33823655 49.28982924 56.         57.30050726 56.70153253
 52.56439281 58.5442895  54.          1.31805483 57.31842995 54.52588524
 54.33318469 57.76596512 41.35789677 46.02627301 50.41411803 56.93702652
 59.         59.37500952 44.86392134 59.06330665  1.73244569 54.93961217
 55.02137927 60.64669818 46.50137685 50.29292735 41.85081233 20.210879
 53.51005047 21.01225355 58.29967285 57.         44.56577168  1.7206471
 55.33762378 58.96681467 58.         56.38741895 50.09723315 56.30315397
 57.5732856  52.         36.54937878 48.41374872 55.25493467 35.81152004
  1.45046578 47.36791249 48.57955056 52.32172705 57.70658118 55.
 54.         34.72609966 46.2362544  54.         58.42172286 28.4855311
 59.38056288  1.78745293 55.29148567 48.32042718 52.71336991 23.56913018
 48.59410513 55.3853267  28.39471507 60.1189268  58.         55.85629777
 42.18186745 48.67245182  1.14752178 56.74534786 59.08500471 59.70387919
 57.52655333 50.         35.67269487 56.69241555 58.78915487 42.76960689
 51.38439412 58.22434401 42.06399314  1.44515857 55.76483529 59.99220805
 55.8345059  41.         61.         57.65363824 37.65109826 40.
 54.22914304 53.03722526 51.15840271 31.91911596]
2024-12-17 12:55:57,884 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 12:56:48,130 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:02:01,971 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:03:58,276 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:05:46,840 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:11:37,285 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:13:04,871 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:16:37,989 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:17:00,633 - pyswarms.single.global_best - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1}
2024-12-17 13:23:11,853 - pyswarms.single.global_best - INFO - Optimization finished | best cost: 4100.131969, best pos: [ 1.53283951  3.88912155 36.38700528 41.51392541 46.38473758 61.
 53.62241096 54.51103849 30.88616114 49.00654553 31.24849229 43.49158674
 47.20002676  1.31120853  4.57034078 37.91832336 20.22003721 47.64493466
 57.         56.38459065 49.         33.04816466 56.85612228 44.33767937
 56.06976337 36.71693004  1.24152721  5.96521707 43.2257801  26.4074685
 34.75308876 30.25225355 40.61493059 36.45501362 56.         51.12804072
 36.73342518 51.22072336 45.78053775  1.19923559  5.40429351 43.6460399
 29.43883654 46.14487064 48.         46.8038172  43.         40.10036967
 49.98445236 53.55361188 50.29611789 38.2978202   0.96331591  1.76294332
 47.29268051 48.24781223 17.46494819 38.51322937 47.         44.48246364
 36.29558001 36.50466804 41.51282931 37.58264438 44.77630532  1.38785965
  3.90528755 50.22689506 16.92048669 42.25096778 52.78219456 20.47340738
 55.         53.92344919 59.29034281 60.65730945 51.77292979 60.
  0.73359258  6.1608908  45.55806922 36.02677302 50.         45.16911665
 48.87226424 57.01710811 45.05234175 58.         52.89928961 47.
 43.22928798  1.33620241  4.5906344  55.56411405 42.59048365 41.59794329
 57.         39.21335731 54.82805783 39.4458587  47.51616211 25.89889276
 28.60855003 52.81948009  1.64525231  5.02292383 44.         46.48402311
 32.25809584 46.02901784 34.09827466 30.35536332 35.07693714 51.73742885
 52.18474543 48.0080287  48.          0.99845641  4.04587802 47.73518859
 43.92480779 43.96417596 42.4033331  33.97830646 30.66758277 46.80837348
 52.93197652 45.42064785 48.13582228 27.35128911]
2024-12-17 13:47:21,710 - pyswarms.backend.generators - ERROR - Please check the size and value of dimensions
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 129, in generate_discrete_swarm
    raise ValueError("User-defined init_pos is not binary!")
ValueError: User-defined init_pos is not binary!
2024-12-17 13:47:39,570 - pyswarms.backend.generators - ERROR - Please check the size and value of dimensions
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 129, in generate_discrete_swarm
    raise ValueError("User-defined init_pos is not binary!")
ValueError: User-defined init_pos is not binary!
2024-12-17 13:55:22,946 - pyswarms.backend.generators - ERROR - generate_discrete_swarm() takes an int for n_particles and dimensions
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 128, in generate_discrete_swarm
    if not len(np.unique(init_pos)) <= 2:
  File "d:\conda\envs\comp_int\lib\site-packages\numpy\lib\arraysetops.py", line 274, in unique
    ret = _unique1d(ar, return_index, return_inverse, return_counts,
  File "d:\conda\envs\comp_int\lib\site-packages\numpy\lib\arraysetops.py", line 336, in _unique1d
    ar.sort()
TypeError: '<' not supported between instances of 'map' and 'map'
2024-12-17 13:58:39,849 - pyswarms.backend.generators - ERROR - generate_discrete_swarm() takes an int for n_particles and dimensions
Traceback (most recent call last):
  File "d:\conda\envs\comp_int\lib\site-packages\pyswarms\backend\generators.py", line 128, in generate_discrete_swarm
    if not len(np.unique(init_pos)) <= 2:
  File "d:\conda\envs\comp_int\lib\site-packages\numpy\lib\arraysetops.py", line 274, in unique
    ret = _unique1d(ar, return_index, return_inverse, return_counts,
  File "d:\conda\envs\comp_int\lib\site-packages\numpy\lib\arraysetops.py", line 336, in _unique1d
    ar.sort()
TypeError: '<' not supported between instances of 'itertools.chain' and 'itertools.chain'
2024-12-17 13:59:28,969 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1, 'k': 3, 'p': 1}
2024-12-17 14:00:08,959 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1, 'k': 3, 'p': 1}
2024-12-17 14:00:29,965 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.1, 'k': 3, 'p': 1}
2024-12-17 14:06:48,583 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 5, 'p': 2}
2024-12-17 14:19:14,344 - pyswarms.discrete.binary - INFO - Optimization finished | best cost: 2911.086738, best pos: [0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 0 1 0 1 1 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 1
 1 1 1 1 1 0 0 1 0 1 1 1 0 1 1 0 1 1 0 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0
 1 0 1 1 1 1 1 1 1 0 0 1 1 0 1 0 1 0 0 0 1 0 0 1 0 0 1 1 0 1 1 0 1 1 1 0 1
 1 0 1 0 0 0 1 1 1 0 1 1 0 0 1 0 1 1 0 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 0 1 1
 0 1 1 1 1 0 0 0 1 1 0 1 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1
 0 1 1 0 1 1 1 0 0 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0 1 0 1 1 0 1 1 1 0 1 0 1
 0 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 1 0 0 1 1 0 0 1 0 1 0 1 0
 0 1 0 1 0 0 1 0 0 1 1 1 0 1 0 1 1 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 1 0
 1 0 0 0 1 1 0 1 1 1 1 0 0 0 0 1 1 1 0 0 0 1 1 1 1 1 0 1 0 0 1 1 0 1 0 1 1
 1 1 0 1 1 1 0 0 1 1 1 0 1 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1 0 1 0 1 0 0 0 1 0
 0 1 0 0 0 0 1 0 0 1 1 0 0 1 0 1 1 0 1 1 1 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0
 0 1 0 0 1 0 0 0 1 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 0 0 1 0 0 1 1
 1 1 0 0 0 0 0 0 1 0 1 1 1 1 0 0 1 0 1 1 0 0 0 0 1 0 0 0 1 0 0 1 1 1 1 0 1
 0 0 1 1 0 0 1 1 0 0 1 1 1 0 1 1 0 0 0 1 0 1 0 0 1 0 1 0 1 1 0 0 1 0 1 0 1
 0 1 0 0 0 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 0 0 1 1 1 1 1 0 0 0 0 1 0 1 1 0 0
 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 0 1 0 0
 1 1 1 1 1 1 0 0 0 1 1 0 0 1 1 1 0 0 1 1 0 0 0 0 0 1 1 1 0 1 0 1 1 0 0 1 0
 0 1 1 1 1 1 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 1 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0
 1 1 0 1 1 0 0 0 1 0 0 0 0 1 0 1 0 1 1 1 0 1 0 1 0 1 1 1 1 0 0 0 1 0 1 0 1
 1 0 1 0 1 0 1 1 0 1 0 0 0 1 0 0 1 1 1 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 1 0 0]
2024-12-17 14:20:56,414 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.2, 'w': 0.5, 'k': 3, 'p': 1}
2024-12-17 14:21:51,610 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.2, 'w': 0.5, 'k': 3, 'p': 1}
2024-12-17 14:22:29,259 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.2, 'w': 0.5, 'k': 3, 'p': 1}
2024-12-17 14:25:38,708 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.2, 'w': 0.5, 'k': 3, 'p': 2}
2024-12-17 14:29:03,803 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.3, 'c2': 0.5, 'w': 0.9, 'k': 3, 'p': 2}
2024-12-17 14:31:01,282 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.2, 'w': 0.5, 'k': 3, 'p': 2}
2024-12-17 14:36:04,914 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2024-12-17 14:58:17,417 - pyswarms.discrete.binary - INFO - Optimization finished | best cost: 2909.4570510000003, best pos: [0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 1 0 0 1 0 1 0 0 1 1 1 0 1 0 0 0 0 0 0 0
 0 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0 0 0 1 0 0 1 1 1 0 1 0 1 1 1 0 1 0 1
 0 1 0 0 0 0 1 1 1 1 0 0 1 1 1 1 0 1 1 0 1 0 0 0 0 0 1 1 0 0 1 0 1 0 0 0 1
 1 0 0 1 0 1 1 1 0 1 1 1 0 0 1 0 0 0 1 1 1 1 0 0 0 0 0 1 1 0 1 1 1 1 1 1 0
 1 0 1 0 1 0 0 0 0 1 1 0 1 1 1 1 0 1 1 1 1 1 0 0 0 1 0 0 0 1 1 0 0 0 1 0 0
 1 0 0 0 0 1 1 1 1 0 0 1 1 0 1 1 0 1 0 0 1 1 1 1 1 0 0 1 1 0 0 1 1 1 0 0 0
 0 1 0 1 1 1 1 0 1 1 1 0 0 1 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 0 1 1 0 1 1 1 0
 0 1 1 0 0 1 0 1 0 0 0 1 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 0 1 0 0 1 0 1 0 1 0
 1 0 1 1 0 0 0 0 0 0 0 0 1 1 0 1 0 1 1 1 1 0 1 1 0 0 1 0 0 0 0 1 1 0 1 1 1
 0 1 0 1 1 1 0 0 0 0 0 1 0 0 1 0 0 1 1 0 0 0 1 1 1 1 0 1 0 0 1 0 0 0 0 0 1
 1 1 1 0 0 0 0 1 1 1 0 1 0 1 0 1 1 1 1 0 0 0 1 0 0 0 0 0 1 1 1 0 1 1 1 0 1
 0 0 0 1 0 1 0 1 1 0 1 1 0 1 1 1 0 0 1 1 0 1 1 1 0 1 0 0 0 0 0 1 0 1 1 0 0
 1 1 0 0 0 0 1 1 1 1 0 1 0 1 1 1 1 0 1 0 0 0 1 1 1 1 0 1 0 0 1 0 1 1 1 0 1
 1 1 0 0 0 1 0 1 1 0 0 1 1 0 0 0 1 1 0 0 0 1 0 0 0 0 1 0 0 1 1 1 1 1 1 0 0
 1 1 1 0 0 1 0 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1 0 0 0
 0 1 1 1 1 1 1 0 0 0 1 0 1 1 0 1 1 0 0 1 0 0 0 1 1 1 0 1 0 1 1 1 1 0 0 1 0
 0 1 0 1 1 1 1 1 0 0 1 0 1 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 1 1 1 0 0 0 0 1 0
 1 0 0 1 1 1 1 1 0 1 0 0 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 0 1 1 0 1 1 0 1 1 1
 1 1 1 0 0 1 1 1 0 1 1 1 0 0 1 0 1 0 1 0 0 1 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0
 1 1 0 1 0 1 0 1 0 0 0 1 1 0 0 0 0 0 1 1 1 0 1 1 1 0 0 0 0 0 0 0 1 0 1 1 1]
2024-12-17 15:00:16,856 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2024-12-17 15:02:46,591 - pyswarms.discrete.binary - INFO - Optimize for 100 iters with {'c1': 0.5, 'c2': 0.3, 'w': 0.9, 'k': 3, 'p': 2}
2024-12-17 15:25:07,883 - pyswarms.discrete.binary - INFO - Optimization finished | best cost: -13061.930013000001, best pos: [0 0 0 ... 0 1 1]
